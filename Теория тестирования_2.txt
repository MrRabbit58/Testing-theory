Что такое проект?
	IAPM – 2022
	Предприятие, которое характеризуется общей уникальностью условий, таких как цели, время, бюджет, люди и другие ограничения.

Из каких этапов состоит Waterfall model/Каскадная модель?
	Общее планирование => Пользовательские требования => Системные требования => Техническая архитектура =>
	Детализированный дизайн => Разработка и отладка (начало тестирования) =>  Интеграция и модульные тесты =>
	Инсталляционное тестирование => Системное тестирование => Приёмочное тестирование => Итоговая отчетность
	Какие преимущества и недостатки Waterfall model/Каскадной модели?

Из каких этапов состоит V-model/V- модель?
	Бизнес-требования => Функциональные требования => Архитектура системы => Реализация => 
	Модульное тестирование => Интеграционное тестирование => Функциональное тестирование
	Приемо-сдаточное тестирование
	
Когда использовать V-model/V- модель?
	Если требуется тщательное тестирование продукта, то V-модель оправдает заложенную в себя идею: validation and verification.
	Для малых и средних проектов, где требования четко определены и фиксированы.
	В условиях доступности инженеров необходимой квалификации, особенно тестировщиков.

Из каких этапов состоит Iterative model/Итеративная модель?
	Начальное планирование => [Планировани требования => Проектирование исполнения => Тестирование => 
	Оценка] => Развертывание 
	
Когда использовать Iterative model/Итеративной модели?
	Когда основные требования к системе четко определены и понятны. В то же время некоторые детали могут дорабатываться с течением времени.
	Требуется ранний вывод продукта на рынок.
	Есть несколько рисковых фич или целей.
	
Плюсы и минусы Iterative model/Итеративной модели?
	Преимущества итеративного подхода: снижение рисков на начальных стадиях разработки; 
	раннее обнаружение расхождений между требованиями, моделями и реализацией проекта; 
	оценка состояния проекта в реальном времени. 
	Недостатки итеративного подхода: при отсутствии четких требований к проекту, возможны проблемы при разработке архитектуры проекта; 
	требуется постоянное вовлечение в процесс заказчика; отсутствие устойчивых сроков и бюджета.
	
Agile - это?
	- метод гибкого управления проектами. Гибким этот подход называют потому, что команда работает со списком задач, который можно менять. 
	У сотрудников больше свободы действий, в процессе работы они могут убирать и добавлять новые задачи.
	
Agile манифест - это?
	- основополагающий документ, в котором кратко описаны ценности и принципы, лежащие в основе этих методологий
	
Какие ценности Agile манифест?
	1. Люди и взаимодействие важнее процессов и инструментов. 
	Хорошие инструменты и процессы тоже важны, но главное — сплочённость команды и способность эффективно общаться и работать друг с другом. 
	Без тесного сотрудничества и взаимопонимания даже лучшие инструменты и практики могут оказаться неэффективными.

	2. Работающий продукт важнее исчерпывающей документации. 
	Это не значит, что документация не нужна совсем. 
	Но когда стоит выбор: доработать продукт или описать этапы доработки, команда должна отдавать предпочтение первому. 
	Команды, которые работают по Agile, фиксируют в документах только самое необходимое.

	3. Сотрудничество с заказчиком важнее согласования условий контракта. 
	Вместо обсуждения условий контракта нужно понять, для чего заказчику нужен продукт и что он хочет от него получить. 
	Важно на протяжении всего проекта встречаться с заказчиком, показывать ему промежуточные версии продукта, получать обратную связь и при необходимости вносить изменения.

	4. Готовность к изменениям важнее следования первоначальному плану. 
	Гибкость и адаптивность — ключевые качества команды, работающей по Agile. 
	Требования заказчика и условия рынка могут измениться на любом этапе проекта. 
	Процессы должны быть построены так, чтобы при изменениях проект не рухнул, а перенастроился и продолжил работать.
	
Основные принципы Agile манифест?
	- Приоритет команды проекта — удовлетворение потребностей заказчика с помощью своевременной и регулярной поставки качественного продукта.
	- Изменение требований к продукту приветствуется даже на поздних стадиях разработки. Agile-процессы позволяют обеспечить продукт конкурентными преимуществами.
	- Промежуточный рабочий продукт нужно показывать заказчику как можно чаще — с периодичностью от пары недель до пары месяцев.
	- Руководители и разработчики должны ежедневно работать вместе на протяжении всего проекта.
	- Над проектом должны работать мотивированные специалисты. Нужно создать для них необходимые условия и обеспечить им поддержку.
	- Личное общение — самый практичный и эффективный способ обмена информацией в команде.
	- Работающий продукт — основной показатель прогресса.
	- Процессы в Agile должны быть настроены так, чтобы проект развивался устойчиво. Заказчики, разработчики и пользователи должны быть готовы к тому, что изменения будут вноситься равномерно.
	- Постоянное внимание к техническому совершенству продукта и качеству проектирования повышает гибкость проекта.
	- Не стоит переусложнять проект — лишние процессы нужно свести к минимуму.
	- Лучшие продукты рождаются у команд, которые умеют организовать себя самостоятельно.
	- Команда должна постоянно искать способы работать эффективнее и корректировать свой стиль работы.
	
Scrum - это? (опишите подробно)
	Scrum - это фреймворк процесса, используемый для управления разработкой продукта и другой работой, связанной с знаниями. 
	Скрам является эмпирическим в том смысле, что дает командам возможность установить гипотезу о том, как они думают, 
	что что-то работает, опробовать это, проанализировать полученный опыт и внести соответствующие коррективы. 
	То есть при правильном использовании фреймворка. Скрам структурирован таким образом, 
	чтобы команды могли использовать практики из других фреймворков, которые имеют смысл для контекста команды.
	
Что такое Velocity / Capacity?
	Производительность команды [Скорость](Velocity) - это величина, отражающая количество работы, которое Скрам-команда может выполнить за один Спринт.

	Производительность вычисляется в конце Спринта как сумма Стори Поинтов по всем полностью завершенным Элементам Бэклога Спринта.

	Capacity - вместимость спринта. Количество стори-поинтов, которые были определены для элементов из Sprint Backlog.

Преимущества и недостатки Scrum
	Преимущеста
	Scrum является адаптивной методологией, требующей вдумчивого применения, 
	но в качестве ее безусловных преимуществ можно назвать: Возможность быстрого запуска проекта с наиболее приоритетными функциями и минимально возможным бюджетом; 
	Ежедневный контроль над ходом работ, и более гибкий контроль над бюджетом проекта; Частые демонстрации проекта.
	Недостатки
	К главным недостаткам методологии Scrum можно отнести: Сложности при заключении договоров. 
	Scrum в принципе не подразумевает наличие фиксированного бюджета и фиксированного технического задания, 
	что затрудняет юридическое оформление такого рода договоренностей; Большое количество исключений.
	
Что такое ретроспектива?
	— это периодическая встреча команды, на которой она анализирует и оценивает рабочий процесс, самих себя и составляет план улучшений на будущее.
	
Kanban- это? (опишите подробно)
	— это метод для определения, управления и совершенствования сервисов, поставляющих результаты умственного труда, 
	такие как экспертные и креативные услуги, а также разработку физических или программных продуктов.
 
Преимущества и недостатки Kanban?
	К достоинствам Канбан относят:
	гибкое планирование с возможностью изменения приоритетов — важно для проектов в IT-сфере
	высокую степень вовлеченности сотрудников, благодаря совместным обсуждениям задач
	быстрый поиск проблем из-за лимитов WIP
	экономию пространства на складах из-за сбалансированного потока транспортировки товаров
	прозрачность рабочих процессов

	Недостатки
	неудобен для больших команд
	невозможность долгосрочного планирования, так как Канбан предназначен для решения актуальных задач
	вероятность торможения проекта при блокировке нескольких задач
	
Что такое SDLS? Из каких этапов состоит? Что происходит на каждом этапе?
	SDLC - это систематизированный процесс, этапы которого охватывают полный жизненный цикл программного обеспечения (Software Lifecycle) 
	и который определяет различные этапы разработки программного обеспечения для создания высококачественного программного обеспечения, 
	отвечающего ожиданиям клиентов и для улучшения эффективности разработки. 
	
	Фазы SDLC:
	Сбор и анализ требований (Requirement Gathering and Analysis): 
	На этом этапе от клиента собирается вся необходимая информация для разработки продукта в соответствии с их ожиданиями. 
	Любые неясности должны быть разрешены сразу на этом этапе. 
	Дизайн (Design): На этом этапе требования, собранные в документе SRS, используются в качестве входных данных, 
	и создается архитектура программного обеспечения, которая используется для реализации разработки системы. 
	Создаются два вида дизайн-документов:

	Высокоуровневый дизайн (HLD - High-Level Design):
		Краткое описание и название каждого модуля;
		Краткое описание функциональности каждого модуля;
		Отношения интерфейсов и зависимости между модулями;
		Таблицы базы данных, идентифицированные вместе с их ключевыми элементами;
		Полные архитектурные схемы с подробными сведениями о технологиях.

	Низкоуровневый дизайн (LLD - Low-Level Design):
		Функциональная логика модулей;
		Таблицы базы данных, которые включают тип и размер;
		Полная детализация интерфейсов;
		Решение всех типов проблем с зависимостями;
		Список сообщений об ошибках;
		Полные входные и выходные значения для каждого модуля.

	Разработка (Implementation or Coding): Реализация / кодирование начинается, как только 
	разработчик получает Design document. Дизайн программного обеспечения переведен в исходный код. 
	На этом этапе реализуются все компоненты программного обеспечения;

	Тестирование (Testing): Тестирование начинается после завершения кодирования и выпуска модулей для тестирования. 
	На этом этапе разработанное программное обеспечение тщательно тестируется, и все обнаруженные дефекты передаются разработчикам для их исправления. 
	Повторное тестирование, регрессионное тестирование проводится до тех пор, пока программное обеспечение не будет соответствовать ожиданиям клиента. 
	Тестировщики обращаются к документу SRS, чтобы убедиться, что программное обеспечение соответствует стандарту заказчика;

	Развертывание (Deployment): После тестирования продукта он развертывается в 
	производственной среде или выполняется первое UAT (пользовательское приемочное тестирование), 
	в зависимости от ожиданий клиента. В случае UAT создается копия производственной среды, 
	и заказчик вместе с разработчиками выполняет тестирование. Если клиент остается доволен, то предоставляет согласие на релиз;

	Поддержка (Maintenance): Основное внимание на этом этапе SDLC уделяется обеспечению того, 
	чтобы потребности продолжали удовлетворяться и чтобы система продолжала работать в соответствии со спецификацией, 
	упомянутой в первом этапе. После того, как система развернута и клиенты начинают использовать разработанную систему следует 3 вида активностей:

	Исправление ошибок;
	Обновление;
	Улучшение.
	
Что такое STLS? Из каких этапов состоит? Что происходит на каждом этапе?
	STLC - это процесс тестирования, который включает в себя определенную последовательность шагов, 
	чтобы гарантировать достижение целей в области качества. 
	В процессе STLC каждое действие выполняется планомерно и систематически. 
	Каждый этап имеет разные цели и результаты. У разных организаций разные этапы STLC, однако основа остается прежней.
	
	Фазы STLC
	Анализ требований (Requirement Analysis): один из важнейших этапов, потому что именно на нем можно почти бесплатно исправить недостатки проекта. 
	Этап анализа требований также определяет потенциальную потребность в автоматизированном тестировании и позволяет производить экономические 
	расчеты затрат на рабочую силу на основе оценки проекта. На этом же этапе обсуждаются и документируются критерии начала и окончания тестирования.

	Планирование тестирования (Test Planning): на этом этапе формируется план тестирования, т.е. мы определяем действия и ресурсы, 
	которые помогут достичь целей тестирования (участники и их роли, инструменты, окружение). 
	Во время планирования мы также пытаемся определить метрики, метод сбора и отслеживания этих метрик. 
	План составляют исходя из требований, тестовой стратегии и анализа рисков.

	Разработка тест-кейсов (Test Case Development): подразумевает использование ручного и автоматизированного тестирования 
	для достижения полного охвата функциональности программного обеспечения, при этом процесс основан на заранее установленных требованиях. 
	Чаще всего тест-кейсы для автоматического тестирования пишутся отдельно, так как кейсы для ручного тестирования описаны в виде шпаргалок (cheat sheets).

	Настройка тестовой среды (Test Environment Setup): в плане тестирования четко указано, какую тестовую среду следует использовать. 
	На этом этапе STLC настраиваются операционные системы и виртуальные машины, развертываются инструменты тестирования, 
	такие как Selenium, Katalon Studio, а также тестовая среда и базы данных проекта. Мы также обращаемся с запросами к DevOps и администраторам, если требуется поддержка.

	Выполнение тестов (Test Execution): тесты выполняются на основе готовой тестовой документации и правильно настроенной тестовой среды. 
	Все результаты тестирования регистрируются в Системе управления тестированием. Отрицательно пройденные тесты, 
	в которых фактический результат отличается от ожидаемого, регистрируются как ошибки и передаются команде разработчиков на доработку с последующей перепроверкой после исправления.

	Завершение цикла испытаний (Test Cycle Closure): окончательная генерация отчетов о тестировании для клиента. 
	Они должны включать затраченное время, процент обнаруженных ошибок и положительных результатов тестирования, 
	общее количество обнаруженных и исправленных ошибок. Что касается отдела тестирования, то это момент для анализа его работы, 
	подведения итогов, анализа его продуктивности и возможности внести предложения по улучшению качества тестирования.